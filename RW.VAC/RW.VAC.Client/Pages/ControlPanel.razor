@page "/"
@using RW.VAC.Application.Contracts.Equipments
@using RW.VAC.Application.Contracts.Productions
@using RW.VAC.Application.Contracts.Products
@using RW.VAC.Client.Shared.Components.EquiStatus
@using RW.VAC.Infrastructure.Opc
@using RW.VAC.Application.Hardwares.Opc
@using System.Linq
@inject IProductService ProductService
@inject IEquipmentService EquipmentService
@inject ILocationService LocationService @* 需要添加位置服务接口 *@
@inject Global Global
@inject GeneralControl generalcontrol

<SectionContent SectionName="navBread">
    <NavBread></NavBread>
</SectionContent>

<div class="rw-content">
    <Card>
        <CardHeader>
            <div class="d-flex justify-content-between align-items-center">
                <h4 class="mb-0">库位管理</h4>
                <div>
                    <Button Color="Color.Primary" OnClick="RefreshData">
                        <Icon Name="IconName.Refresh" /> 刷新
                    </Button>
                    <Button Color="Color.Success" OnClick="ShowFilterModal">
                        <Icon Name="IconName.Filter" /> 筛选
                    </Button>
                </div>
            </div>
        </CardHeader>
        <CardBody>
            @if (isLoading)
            {
                <div class="text-center my-4">
                    <Spinner />
                    <p class="mt-2">加载库位数据中...</p>
                </div>
            }
            else
            {
                <div class="mb-3">
                    <Tabs @bind-SelectedTab="selectedTab">
                        <Tab Name="all">全部库位 (@locations.Count)</Tab>
                        <Tab Name="wait-test">待试验缓存区 (@GetLocationCountByType("缓存区-待试验"))</Tab>
                        <Tab Name="tested">已试验缓存区 (@GetLocationCountByType("缓存区-已试验"))</Tab>
                        <Tab Name="test-dock">试验区接驳位 (@GetLocationCountByType("试验区接驳位"))</Tab>
                        <Tab Name="inspect-dock">成品检测接驳位 (@GetLocationCountByType("成品检测接驳位"))</Tab>
                        <Tab Name="supply">护箱备料区 (@GetLocationCountByType("护箱备料区"))</Tab>
                        <Tab Name="line-dock">产线接驳位 (@GetLocationCountByType("产线接驳位"))</Tab>
                    </Tabs>
                </div>

                <div class="location-grid">
                    @foreach (var location in GetFilteredLocations())
                    {
                        <div class="location-card @GetLocationStatusClass(location)" @onclick="() => ShowLocationDetail(location)">
                            <div class="location-code">@location.LocationId</div>
                            <div class="location-name">@location.LocationName</div>
                            <div class="location-status">
                                @if (location.IsOccupied)
                                {
                                    <span class="badge bg-danger">占用</span>
                                    <div class="mt-1">@location.CurrentPalletId</div>
                                }
                                else
                                {
                                    <span class="badge bg-success">空闲</span>
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (!GetFilteredLocations().Any())
                {
                    <div class="text-center my-4">
                        <p>没有找到符合条件的库位</p>
                    </div>
                }
            }
        </CardBody>
    </Card>
</div>

<!-- 库位详情模态框 -->
<Modal @bind-Visible="@showDetailModal">
    <ModalHeader>
        <ModalTitle>库位详情</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody>
        @if (selectedLocation != null)
        {
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">库位编号</label>
                        <input type="text" class="form-control" value="@selectedLocation.LocationId" readonly />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">库位名称</label>
                        <input type="text" class="form-control" value="@selectedLocation.LocationName" readonly />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">库位类型</label>
                        <input type="text" class="form-control" value="@selectedLocation.LocationType" readonly />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">状态</label>
                        <input type="text" class="form-control" value="@(selectedLocation.IsOccupied ? "占用" : "空闲")" readonly />
                    </div>
                </div>
            </div>
            @if (selectedLocation.CurrentPalletId != null)
            {
                <div class="mb-3">
                    <label class="form-label">当前托盘</label>
                    <input type="text" class="form-control" value="@selectedLocation.CurrentPalletId" readonly />
                </div>
                
                @if (palletProduct != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">产品ID</label>
                                <input type="text" class="form-control" value="@palletProduct.ProductId" readonly />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">产品类型</label>
                                <input type="text" class="form-control" value="@palletProduct.ProductType" readonly />
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">产品名称</label>
                        <input type="text" class="form-control" value="@palletProduct.ProductName" readonly />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">状态</label>
                        <input type="text" class="form-control" value="@palletProduct.Status" readonly />
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <span>托盘未绑定产品</span>
                    </div>
                }
            }
        }
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@(() => showDetailModal = false)">
            关闭
        </Button>
        @if (selectedLocation != null && selectedLocation.IsOccupied)
        {
            <Button Color="Color.Danger" Clicked="@(() => ShowConfirmClearLocation())">
                清空库位
            </Button>
        }
    </ModalFooter>
</Modal>

<!-- 筛选模态框 -->
<Modal @bind-Visible="@showFilterModal">
    <ModalHeader>
        <ModalTitle>筛选库位</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody>
        <div class="mb-3">
            <label class="form-label">库位类型</label>
            <Select TValue="string" @bind-Value="@filterLocationType">
                <SelectItem Value="@string.Empty">全部</SelectItem>
                <SelectItem Value="缓存区-待试验">缓存区-待试验</SelectItem>
                <SelectItem Value="缓存区-已试验">缓存区-已试验</SelectItem>
                <SelectItem Value="试验区接驳位">试验区接驳位</SelectItem>
                <SelectItem Value="成品检测接驳位">成品检测接驳位</SelectItem>
                <SelectItem Value="护箱备料区">护箱备料区</SelectItem>
                <SelectItem Value="产线接驳位">产线接驳位</SelectItem>
            </Select>
        </div>
        <div class="mb-3">
            <label class="form-label">库位状态</label>
            <Select TValue="int" @bind-Value="@filterOccupancyStatus">
                <SelectItem Value="-1">全部</SelectItem>
                <SelectItem Value="0">空闲</SelectItem>
                <SelectItem Value="1">占用</SelectItem>
            </Select>
        </div>
        <div class="mb-3">
            <label class="form-label">库位ID/名称</label>
            <input type="text" class="form-control" @bind="@filterLocationText" placeholder="输入库位ID或名称搜索" />
        </div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@(() => showFilterModal = false)">
            取消
        </Button>
        <Button Color="Color.Primary" Clicked="@ApplyFilter">
            应用筛选
        </Button>
        <Button Color="Color.Warning" Clicked="@ResetFilter">
            重置筛选
        </Button>
    </ModalFooter>
</Modal>

<!-- 确认清空库位模态框 -->
<Modal @bind-Visible="@showConfirmClearModal">
    <ModalHeader>
        <ModalTitle>确认操作</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody>
        <p>确定要清空库位 <strong>@(selectedLocation?.LocationId)</strong> 吗？</p>
        <p>此操作将解除托盘与此库位的关联。</p>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@(() => showConfirmClearModal = false)">
            取消
        </Button>
        <Button Color="Color.Danger" Clicked="@ClearLocation">
            确认清空
        </Button>
    </ModalFooter>
</Modal>
@code {


    public class ProductPalletModel
    {
        public string ProductId { get; set; }
        public string ProductType { get; set; }
        public string ProductName { get; set; }
        public string Status { get; set; }
        public string PalletId { get; set; }
    }

    // 状态变量
    private List<LocationModel> locations = new List<LocationModel>();
    private LocationModel selectedLocation;
    private ProductPalletModel palletProduct;
    private bool isLoading = true;
    private bool showDetailModal = false;
    private bool showFilterModal = false;
    private bool showConfirmClearModal = false;
    private string selectedTab = "all";

    // 筛选条件
    private string filterLocationType = string.Empty;
    private int filterOccupancyStatus = -1; // -1: 全部, 0: 空闲, 1: 占用
    private string filterLocationText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            // 这里应该调用您的服务来获取库位数据
            // locations = await LocationService.GetLocationsAsync();
            
            // 示例数据 - 实际应用中应替换为真实服务调用
            locations = new List<LocationModel>
            {
                new LocationModel { LocationId = "WAIT-TEST-01", LocationType = "缓存区-待试验", LocationName = "待试验缓存位01", IsOccupied = false, LastUpdate = DateTime.Now },
                new LocationModel { LocationId = "WAIT-TEST-02", LocationType = "缓存区-待试验", LocationName = "待试验缓存位02", IsOccupied = true, CurrentPalletId = "B-TRAY-001", LastUpdate = DateTime.Now },
                new LocationModel { LocationId = "TESTED-01", LocationType = "缓存区-已试验", LocationName = "已试验缓存位01", IsOccupied = false, LastUpdate = DateTime.Now },
                new LocationModel { LocationId = "TEST-DOCK-A1-1", LocationType = "试验区接驳位", LocationName = "辅助试验台1接驳位1", IsOccupied = true, CurrentPalletId = "A-TRAY-001", LastUpdate = DateTime.Now },
                new LocationModel { LocationId = "INSPECT-DOCK-1", LocationType = "成品检测接驳位", LocationName = "待检测接驳位", IsOccupied = false, LastUpdate = DateTime.Now },
                new LocationModel { LocationId = "SUPPLY-01", LocationType = "护箱备料区", LocationName = "护箱备料位01", IsOccupied = false, LastUpdate = DateTime.Now },
                new LocationModel { LocationId = "LINE-DOCK-A1", LocationType = "产线接驳位", LocationName = "辅助装置产线接驳位1", IsOccupied = true, CurrentPalletId = "A-TRAY-002", LastUpdate = DateTime.Now },
            };
        }
        catch (Exception ex)
        {
            // 处理异常
            Console.WriteLine($"加载库位数据出错: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ShowLocationDetail(LocationModel location)
    {
        selectedLocation = location;
        palletProduct = null;

        if (location.IsOccupied && !string.IsNullOrEmpty(location.CurrentPalletId))
        {
            try
            {
                // 获取托盘绑定的产品信息
                // 实际应用中应替换为真实服务调用
                // palletProduct = await ProductService.GetProductByPalletIdAsync(location.CurrentPalletId);
                
                // 示例数据
                if (location.CurrentPalletId == "B-TRAY-001")
                {
                    palletProduct = new ProductPalletModel
                    {
                        ProductId = "B2023051001",
                        ProductType = "制动装置",
                        ProductName = "XX型号制动装置",
                        Status = "待试验",
                        PalletId = "B-TRAY-001"
                    };
                }
                else if (location.CurrentPalletId == "A-TRAY-001")
                {
                    palletProduct = new ProductPalletModel
                    {
                        ProductId = "A2023051001",
                        ProductType = "辅助装置",
                        ProductName = "YY型号辅助装置",
                        Status = "已试验",
                        PalletId = "A-TRAY-001"
                    };
                }
            }
            catch (Exception ex)
            {
                // 处理异常
                Console.WriteLine($"获取产品信息出错: {ex.Message}");
            }
        }

        showDetailModal = true;
    }

    private void ShowConfirmClearLocation()
    {
        showDetailModal = false;
        showConfirmClearModal = true;
    }

    private async Task ClearLocation()
    {
        try
        {
            if (selectedLocation != null)
            {
                // 实际应用中调用服务来清空库位
                // await LocationService.ClearLocationAsync(selectedLocation.LocationId);
                
                // 示例：本地更新UI
                var location = locations.FirstOrDefault(l => l.LocationId == selectedLocation.LocationId);
                if (location != null)
                {
                    location.IsOccupied = false;
                    location.CurrentPalletId = null;
                    location.LastUpdate = DateTime.Now;
                }
                
                showConfirmClearModal = false;
                await LoadData(); // 重新加载数据以确保显示最新状态
            }
        }
        catch (Exception ex)
        {
            // 处理异常
            Console.WriteLine($"清空库位出错: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void ShowFilterModal()
    {
        showFilterModal = true;
    }

    private void ApplyFilter()
    {
        showFilterModal = false;
    }

    private void ResetFilter()
    {
        filterLocationType = string.Empty;
        filterOccupancyStatus = -1;
        filterLocationText = string.Empty;
        showFilterModal = false;
    }

    private List<LocationModel> GetFilteredLocations()
    {
        var filtered = locations.AsEnumerable();

        // 根据选项卡筛选
        if (selectedTab != "all")
        {
            string locationType = "";
            switch (selectedTab)
            {
                case "wait-test":
                    locationType = "缓存区-待试验";
                    break;
                case "tested":
                    locationType = "缓存区-已试验";
                    break;
                case "test-dock":
                    locationType = "试验区接驳位";
                    break;
                case "inspect-dock":
                    locationType = "成品检测接驳位";
                    break;
                case "supply":
                    locationType = "护箱备料区";
                    break;
                case "line-dock":
                    locationType = "产线接驳位";
                    break;
            }
            filtered = filtered.Where(l => l.LocationType == locationType);
        }

        // 根据类型筛选
        if (!string.IsNullOrEmpty(filterLocationType))
        {
            filtered = filtered.Where(l => l.LocationType == filterLocationType);
        }

        // 根据占用状态筛选
        if (filterOccupancyStatus >= 0)
        {
            bool isOccupied = filterOccupancyStatus == 1;
            filtered = filtered.Where(l => l.IsOccupied == isOccupied);
        }

        // 根据文本筛选
        if (!string.IsNullOrEmpty(filterLocationText))
        {
            string text = filterLocationText.ToLower();
            filtered = filtered.Where(l => 
                l.LocationId.ToLower().Contains(text) || 
                l.LocationName.ToLower().Contains(text) ||
                (l.CurrentPalletId != null && l.CurrentPalletId.ToLower().Contains(text)));
        }

        return filtered.ToList();
    }

    private int GetLocationCountByType(string locationType)
    {
        return locations.Count(l => l.LocationType == locationType);
    }

    private string GetLocationStatusClass(LocationModel location)
    {
        return location.IsOccupied ? "location-occupied" : "location-free";
    }
}