@using RW.VAC.Application.Contracts.Products
@using RW.VAC.Domain.Products
@using RW.Framework.Extensions

@inherits FeedbackComponent<FormOption<ProductCreateUpdateDto>>

@inject IProductService ProductService

<Form @ref="_form" Model="@_model" LabelColSpan="4" ValidateOnChange="true">
	<FormItem Label="产品名称">
		<Input @bind-Value="@context.Name" MaxLength="50" />
	</FormItem>
    <FormItem Label="产品编号">
        <Input @bind-Value="@context.Code" MaxLength="50" />
    </FormItem>
    <FormItem Label="工艺线路">
        <RadioGroup @bind-Value="@context.Routing">
            <Radio Value="@RoutingTypes.Seal">@RoutingTypes.Seal.GetDescription()</Radio>
			<Radio Value="@RoutingTypes.Vacuum">@RoutingTypes.Vacuum.GetDescription()</Radio>
        </RadioGroup>
    </FormItem>
	<FormItem Label="配方编号">
		<Input @bind-Value="@context.Recipe" />
	</FormItem>
</Form>

@code {
	private ProductCreateUpdateDto _model = null!;
	private Form<ProductCreateUpdateDto>? _form;

	protected override void OnInitialized()
	{
		_model = base.Options.Data;
		base.OnInitialized();
	}

	public override async Task OnFeedbackOkAsync(ModalClosingEventArgs e)
	{
		if (_form!.Validate())
		{
			_ = base.Options.Id.HasValue ? await ProductService.UpdateAsync(base.Options.Id.Value, _model) : await ProductService.CreateAsync(_model);
		}
		else
		{
			e.Cancel = true;
		}
		await base.OnFeedbackOkAsync(e);
	}
}
