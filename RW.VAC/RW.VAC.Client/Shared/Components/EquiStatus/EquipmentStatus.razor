@using RW.Framework.Extensions
@using RW.VAC.Domain.Equipments
@using RW.VAC.Infrastructure.Opc

@implements IDisposable

@inject TagStorage Tags

@if (_tagItem != null)
{
	<div style="display:flex; align-items:center">
		<StatusIndicator Pulse="@Pulse" Color="@Color"/>
		<span style="margin-left: 2px">@(EquipStatus.GetDescription())</span>
	</div>
}

@code {

	[Parameter, EditorRequired] public required string GroupCode { get; set; }

	private EquipStatus _equipStatus;

	public EquipStatus EquipStatus
	{
		get => _equipStatus;
		set
		{
			switch (value)
			{
				case EquipStatus.StandBy:
					Color = "#fa8c16";
					Pulse = true;
					break;
				case EquipStatus.Running:
					Color = "#52c41a";
					Pulse = true;
					break;
				case EquipStatus.Alarm:
					Color = "#f5222d";
					Pulse = true;
					break;
				default:
					Color = "#808080";
					Pulse = false;
					break;
			}

			_equipStatus = value;
		}
	}

	private string Color { get; set; } = "#808080";
	private bool Pulse { get; set; } = false;

	private TagItem? _tagItem;

	protected override void OnInitialized()
	{
		_tagItem = Tags[GroupCode, TagTypeConsts.StatusTag];
		if (_tagItem != null) _tagItem.Changed += OnChanged;
	}

	private void OnChanged(TagChangedEventArgs e)
	{
		EquipStatus = e.Value.To<ushort>().To<EquipStatus>();
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		if (_tagItem != null) _tagItem.Changed -= OnChanged;
	}

}